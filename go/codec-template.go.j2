{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        bufutil.ListMultiFrameCodecEncode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, bufutil.{{ item_type(lang_name, param.type) }}CodecEncode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        bufutil.EntryListCodecEncode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, bufutil.{{ key_type(lang_name, param.type) }}CodecEncode, bufutil.{{ value_type(lang_name, param.type) }}CodecEncode)
    {%- elif is_var_sized_map(param.type) -%}
        bufutil.MapCodecEncode{% if param.nullable %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, bufutil.{{ key_type(lang_name, param.type) }}CodecEncode, bufutil.{{ value_type(lang_name, param.type) }}CodecEncode)
    {%- else -%}
        {%- if param.nullable -%}
            bufutil.EncodeNullable(clientMessage, {{ escape_keyword(param.name) }}, bufutil.{{ lang_name(param.type) }}CodecEncode){# TODO: check to fix "Codec::encode" #}
        {%- else -%}
            bufutil.{{ lang_name(param.type) }}CodecEncode(clientMessage, {{ escape_keyword(param.name) }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        bufutil.ListMultiFrameCodecDecode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable %}Nullable{% endif %}(iterator, bufutil.{{ item_type(lang_name, param.type) }}CodecDecode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        bufutil.EntryListCodecDecode{% if param.nullable  %}Nullable{% endif %}(iterator, bufutil.{{ key_type(lang_name, param.type) }}CodecDecode, bufutil.{{ value_type(lang_name, param.type) }}CodecDecode)
    {%- elif is_var_sized_map(param.type) -%}
        bufutil.MapCodecDecode{% if param.nullable %}Nullable{% endif %}(iterator, bufutil.{{ key_type(lang_name, param.type) }}CodecDecode, bufutil.{{ value_type(lang_name, param.type) }}CodecDecode)
    {%- else -%}
        {%- if param.nullable -%}
            bufutil.DecodeNullable(iterator, bufutil.{{ lang_name(param.type) }}CodecDecode) {# TODO: check to fix "Codec::decode" #}
        {%- else -%}
            bufutil.{{ lang_name(param.type) }}CodecDecode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
/*
* Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package proto

{#  <imports>  package proto#}
{# TODO: Remove unused imports  #}
import (
"github.com/hazelcast/hazelcast-go-client/serialization"
)

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
{% for line in method.doc.splitlines() %}
 * {{ line }}
{% endfor %}
 */
//@Generated("!codec_hash!")
const (
    //hex: {{ '0x%06X'|format(method.request.id) }}
    {{ service_name|capital }}{{ method.name|capital }}RequestMessageType = {{ method.request.id }}
    //hex: {{ '0x%06X'|format(method.response.id) }}
    {{ service_name|capital }}{{ method.name|capital }}ResponseMessageType = {{ method.response.id }}
{#FIXED SIZED PARAMETER OFFSET CONSTANTS#}
{% for param in fixed_params(method.request.params) %}
    {{ service_name|capital }}{{ method.name|capital }}Request{{ param.name|capital }}FieldOffset = {% if loop.first %}bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes{% else %}{{ service_name|capital }}{{ method.name|capital }}Request{{ loop.previtem.name|capital }}FieldOffset + bufutil.{{loop.previtem.type|capital}}SizeInBytes{% endif %}

    {% if loop.last %}
    {{ service_name|capital }}{{ method.name|capital }}RequestInitialFrameSize = {{ service_name|capital }}{{ method.name|capital }}Request{{param.name|capital}}FieldOffset + bufutil.{{param.type|capital}}SizeInBytes
    {% endif %}
{% else %}
    {{ service_name|capital }}{{ method.name|capital }}RequestInitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
{% endfor %}
{% for param in fixed_params(method.response.params) %}
    {{ service_name|capital }}{{ method.name|capital }}Response{{ param.name|capital }}FieldOffset = {% if loop.first %}bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes{% else %}{{ service_name|capital }}{{ method.name|capital }}Response{{ loop.previtem.name|capital }}FieldOffset + bufutil.{{loop.previtem.type|capital}}SizeInBytes{% endif %}

    {% if loop.last %}
    {{ service_name|capital }}{{ method.name|capital }}ResponseInitialFrameSize = {{ service_name|capital }}{{ method.name|capital }}Response{{param.name|capital}}FieldOffset + bufutil.{{param.type|capital}}SizeInBytes
    {% endif %}
{% else %}
    {{ service_name|capital }}{{ method.name|capital }}ResponseInitialFrameSize = bufutil.CorrelationIdFieldOffset + bufutil.IntSizeInBytes
{% endfor %}
{% for event in method.events%}
    {% for param in fixed_params(event.params) %}
    {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}{{ param.name|capital }}FieldOffset = {% if loop.first %}bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes{% else %}{{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}{{ loop.previtem.name|capital }}FieldOffset + bufutil.{{loop.previtem.type|capital }}SizeInBytes{% endif %}

    {% if loop.last %}
    {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}InitialFrameSize = {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital}}{{param.name|capital}}FieldOffset + bufutil.{{param.type|capital}}SizeInBytes
    {% endif %}
    {% else %}
    {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}InitialFrameSize = bufutil.PartitionIdFieldOffset + bufutil.IntSizeInBytes
    {% endfor %}
    //hex: {{ '0x%06X'|format(event.id) }}
    {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}MessageType = {{ event.id }}

{% endfor %}

)

{#REQUEST PARAMETERS#}
/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type {{ service_name|capital }}{{ method.name|capital }}RequestParameters struct {
{% for param in method.request.params %}

    /**
    {% for line in param.doc.splitlines() %}
    * {{ line }}
    {% endfor %}
    */
    {% if param.nullable  %}/* @Nullable */ {% endif %}{{ escape_keyword(param.name) }} {{ lang_types_decode(param.type) }}
{% endfor %}
}

{#REQUEST ENCODE#}
func {{ service_name|capital }}{{ method.name|capital }}EncodeRequest({% for param in method.request.params %}{% if param.nullable  %}/* @Nullable */ {% endif %}{{ escape_keyword(param.name) }} {{ lang_types_encode(param.type) }}{% if not loop.last %}, {% endif %}{% endfor %}) *bufutil.ClientMessage {
    clientMessage := bufutil.CreateForEncode()
    clientMessage.Is_Retryable = {{ method.request.retryable|lower }}
    clientMessage.SetAcquiresResource({{ method.request.acquiresResource|lower }})
    clientMessage.SetOperationName("{{ service_name|capital }}.{{ method.name|capital }}")
	initialFrame := &bufutil.Frame{Content: make([]byte, ListAddAllResponseInitialFrameSize), Flags: bufutil.UnfragmentedMessage}
{# new byte[RequestInitialFrameSize] , new ClientMessage.Frame(..) , int32 #}
{# TODO: probably true #}
    bufutil.EncodeInt(initialFrame.Content, bufutil.TypeFieldOffset, {{ service_name|capital }}{{ method.name|capital }}RequestMessageType)
{% for param in fixed_params(method.request.params) %}
    bufutil.Encode{{ param.type|capital }}(initialFrame.Content, {{ service_name|capital }}{{ method.name|capital }}Request{{ param.name|capital }}FieldOffset, {{ escape_keyword(param.name) }})
{% endfor %}
    clientMessage.Add(initialFrame)
{% for param in var_size_params(method.request.params) %}
    {{ encode_var_sized(param) }}
{% endfor %}
    return clientMessage
}


{#RESPONSE PARAMETERS#}
/* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
type {{ service_name|capital }}{{ method.name|capital }}ResponseParameters struct {
{% for param in method.response.params %}
    /**
    {% for line in param.doc.splitlines() %}
    * {{ line }}
    {% endfor %}
    */
    {% if param.nullable  %}/* @Nullable */ {% endif %}{{ escape_keyword(param.name) }} {{ lang_types_decode(param.type) }}
{% endfor %}
}



{#RESPONSE DECODE#}
func {{ service_name|capital }}{{ method.name|capital }}DecodeResponse(clientMessage *bufutil.ClientMessage) *{{ service_name|capital }}{{ method.name|capital }}ResponseParameters {
    iterator := clientMessage.FrameIterator()
{# TODO: for iterator type #}
    response := new({{ service_name|capital }}{{ method.name|capital }}ResponseParameters)
    {% if  fixed_params(method.response.params)|length != 0 %}
    initialFrame := iterator.Next()
    {% else %}
    //empty initial frame
    iterator.Next()
    {% endif %}
{% for param in fixed_params(method.response.params) %}
    response.{{ escape_keyword(param.name) }} = bufutil.Decode{{ param.type|capital }}(initialFrame.Content, {{ service_name|capital }}{{ method.name|capital }}Response{{param.name|capital}}FieldOffset)
{% endfor %}
{% for param in var_size_params(method.response.params) %}
    {%  if 'serialization.Data' ==  lang_types_decode(param.type)  %}
    response.{{ escape_keyword(param.name) }} = {{ decode_var_sized(param)}}.(serialization.Data)
    {% else %}
    response.{{ escape_keyword(param.name) }} = {{ decode_var_sized(param) }}
    {% endif %}
{% endfor %}
    return response
}

{# EVENTS#}
{% if method.events|length != 0 %}

{% for event in method.events%}
    type {{ service_name|capital }}{{ method.name|capital }}AbstractEventItemFunc func({% for param in event.params %}{% if param.nullable  %}/* @Nullable */ {% endif %}{{param.name}} {{ lang_types_encode(param.type) }}{% if not loop.last %}, {% endif %}{% endfor %})
{% endfor %}

func {{ service_name|capital }}{{ method.name|capital }}Handle(clientMessage *bufutil.ClientMessage, handleEventItem {{ service_name|capital }}{{ method.name|capital }}AbstractEventItemFunc){
    messageType := clientMessage.GetMessageType()
    iterator := clientMessage.FrameIterator()
{% for event in method.events%}
    if messageType == {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital}}MessageType {
    {%  if fixed_params(event.params)|length != 0 %}
        initialFrame := iterator.Next()
    {% else %}
    //empty initial frame
     iterator.Next()
    {% endif %}
    {% for param in fixed_params(event.params) %}
        {{ escape_keyword(param.name) }} := bufutil.Decode{{ param.type|capital }}(initialFrame.Content, {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}{{param.name|capital}}FieldOffset)
    {% endfor %}
    {% for param in var_size_params(event.params) %}
        {%  if 'serialization.Data' ==  lang_types_decode(param.type)  %}
        {{ escape_keyword(param.name) }} := {{ decode_var_sized(param)}}.(serialization.Data)
        {% else %}
        {{ escape_keyword(param.name) }} := {{ decode_var_sized(param) }}
        {% endif %}
    {% endfor %}
        handleEventItem({% for param in event.params %}{{ escape_keyword(param.name) }}{% if not loop.last %}, {% endif %}{% endfor %})
        return
        }
    {% endfor %}
        // FINEST: Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType)
        }

    {% endif %}
