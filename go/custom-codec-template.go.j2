{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}is{% else %}get{% endif %}{{ param.name|capital }}(), {{ item_type(lang_name, param.type) }}.encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}is{% else %}get{% endif %}{{ param.name|capital }}(), {{ key_type(lang_name, param.type) }}.encode, {{ value_type(lang_name, param.type) }}.encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}is{% else %}get{% endif %}{{ param.name|capital }}(), {{ key_type(lang_name, param.type) }}.encode, {{ value_type(lang_name, param.type) }}.encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.encodeNullable(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}is{% else %}get{% endif %}{{ param.name|capital }}(), {{ lang_name(param.type) }}.encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.encode(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}is{% else %}get{% endif %}{{ param.name|capital }}())
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(iterator, {{ item_type(lang_name, param.type) }}.decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}.decode, {{ value_type(lang_name, param.type) }}.decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}.decode, {{ value_type(lang_name, param.type) }}.decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.decodeNullable(iterator, {{ lang_name(param.type) }}.decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
/*
 * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package proto

{#  <imports>  package proto#}
{# TODO: Remove unused imports  #}
import (
"bytes"
"github.com/hazelcast/hazelcast-go-client/serialization"
_ "github.com/hazelcast/hazelcast-go-client"
)

type {{ codec.name|capital }} struct {
{% for param in codec.params %}{{ param.name }} {{ lang_types_decode(param.type) }}{% if not loop.last %}{% endif %}

{% endfor %}
}

//@Generated("!codec_hash!")
const (
 {% for param in fixed_params(codec.params) %}
    {{ codec.name|capital }}{{ (param.name)|capital }}FieldOffset = {% if loop.first %}0{% else %}{{ codec.name|capital }}{{ (loop.previtem.name)|capital }}FieldOffset + bufutil.{{ loop.previtem.type|capital }}SizeInBytes{% endif %}

    {% if loop.last %}
    {{ codec.name|capital }}InitialFrameSize = {{ codec.name|capital }}{{ (param.name)|capital }}FieldOffset + bufutil.{{ param.type|capital }}SizeInBytes
    {% endif %}
    {% endfor %}
)

func {{ codec.name|capital }}Encode(clientMessage ClientMessage, {{ param_name(codec.name) }} {{ lang_types_encode(codec.name) }}) {
        clientMessage.add(BeginFrame.copy())
        {% for param in fixed_params(codec.params) %}
        {% if loop.first %}
        initialFrame := ClientMessage.Frame(bytes.NewBuffer(InitialFrameSize))
        {% endif %}
        encode{{ param.type|capital }}(initialFrame.content, {{(param.name)|capital}}FieldOffset, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}is{% else %}get{% endif %}{{ param.name|capital }}())
        {% if loop.last %}
        clientMessage.add(initialFrame)
        {% endif %}
        {% endfor %}
        {% for param in var_size_params(codec.params) %}
        {% if loop.first %}
        {% endif %}
        {{ encode_var_sized(param) }}
        {% endfor %}

        clientMessage.add(EndFrame.copy())
    }

func {{ codec.name|capital }}Decode(iterator ClientMessage.ForwardFrameIterator)  *{{ lang_types_decode(codec.name) }}  {
        // begin frame
        iterator.next()
        {% for param in fixed_params(codec.params) %}
        {% if loop.first %}
        initialFrame := iterator.next()
        {% endif %}
        {{ param.name }} := decode{{ param.type|capital }}(initialFrame.content, {{ (param.name)|capital }}FieldOffset)
        {% endfor %}
        {% for param in var_size_params(codec.params) %}
        {% if loop.first %}
        {% endif %}
        {{ param.name }} := {{ decode_var_sized(param) }}
        {% endfor %}

        fastForwardToEndFrame(iterator)

        {% if codec.returnWithFactory %}
        return CustomTypeFactory.create{{ codec.name }}({% for param in codec.params %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %})
        {% else %}
        return &{{ lang_types_decode(codec.name) }} { {% for param in codec.params %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %} }
        {% endif %}
    }
